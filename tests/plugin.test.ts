import { buildBundle, resolver } from "./bundle";
import fs from "fs";
import path from "path";

describe("rtl-css-transform-webpack-plugin", () => {
    it("Should transform LTR to RTL", async () => {
        expect.assertions(1);
        const bundle = await buildBundle("simple");
        expect(bundle.readFileSync(resolver("main.rtl.css"))).toEqual(
            fs.readFileSync(resolver("cases", "simple", "expected.css"))
        );
    });

    it("Should change file name", async () => {
        expect.assertions(1);
        const bundle = await buildBundle("filename", { filename: "rtl/[chunkhash].css" });
        expect(bundle.readFileSync(resolver("rtl", "3040780fff38feccfee5.css"))).toEqual(
            fs.readFileSync(resolver("cases", "filename", "expected.css"))
        );
    });

    it("Should generate source mapping", async () => {
        expect.assertions(1);
        const bundle = await buildBundle("sourcemap", { sourcemap: true });
        expect(bundle.readFileSync(resolver("main.rtl.css"))).toEqual(
            fs.readFileSync(resolver("cases", "sourcemap", "expected.css"))
        );
    });

    it("Should minimize bundle", async () => {
        expect.assertions(1);
        const bundle = await buildBundle("minimize", undefined, true);
        expect(bundle.readFileSync(resolver("main.rtl.css"))).toEqual(
            fs.readFileSync(resolver("cases", "minimize", "expected.css"))
        );
    });

    it("Should take into account RTLCSS options", async () => {
        expect.assertions(1);
        const bundle = await buildBundle("options", {
            config: {
                options: {
                    clean: false
                }
            }
        });
        expect(bundle.readFileSync(resolver("main.rtl.css"))).toEqual(
            fs.readFileSync(resolver("cases", "options", "expected.css"))
        );
    });

    it("Should take into account RTLCSS plugins", async () => {
        expect.assertions(1);
        const bundle = await buildBundle("plugins", {
            config: {
                plugins: [
                    {
                        name: "test-plugin",
                        priority: 1,
                        directives: {
                            control: {},
                            value: [
                                {
                                    name: "bigger-font-size",
                                    action: function(decl, expr, context) {
                                        decl.raws.value.raw.replace(expr, function(match, value) {
                                            decl.value = decl.raws.value.raw = "18px";
                                        });
                                        return true;
                                    }
                                }
                            ]
                        },
                        processors: []
                    }
                ]
            }
        });
        expect(bundle.readFileSync(resolver("main.rtl.css"))).toEqual(
            fs.readFileSync(resolver("cases", "plugins", "expected.css"))
        );
    });

    it("Should take into account RTLCSS hooks", async () => {
        expect.assertions(1);
        const bundle = await buildBundle("hooks", {
            config: {
                hooks: {
                    post: function(root, postcss) {
                        root.insertBefore(
                            root.nodes[0],
                            postcss.comment({ text: "Generated by RTLCSS" })
                        );
                    }
                }
            }
        });
        expect(bundle.readFileSync(resolver("main.rtl.css"))).toEqual(
            fs.readFileSync(resolver("cases", "hooks", "expected.css"))
        );
    });
});
